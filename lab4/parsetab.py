
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFnonassocELSEright=SUMASSIGNSUBASSIGNMULASSIGNDIVASSIGNleft<>EQNEQGEQLEQleft+-leftDOTSUMDOTSUBleft*/leftDOTMULDOTDIVleftUNARYMINUSright'BREAK COMMENT CONTINUE DIVASSIGN DOTDIV DOTMUL DOTSUB DOTSUM ELSE EQ EYE FLOAT FOR GEQ ID IF INTEGER LEQ MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN SUMASSIGN WHILE ZEROS\n    program : block\n    \n    block : '{' block '}'\n          | block '{' block '}'\n    \n    block : block instruction\n          | instruction\n    \n    instruction : base_instruction ';'\n                | if_statement\n                | loop_statement\n    \n    base_instruction : assign_expression\n                     | keyword\n    \n    assign_expression : variable assign_op expression\n    \n    variable : ID\n             | tensor_id\n    \n    tensor_id : ID '[' sequence ']'\n    \n    sequence : sequence ',' expression\n            | expression\n    \n    expression : result\n    \n    expression : ID\n    \n    result : INTEGER\n           | FLOAT\n           | STRING\n           | tensor\n           | tensor_id\n    \n    tensor : '[' rows ']'\n    \n    rows : rows ';' sequence\n         | sequence\n    \n    expression : '-' expression %prec UNARYMINUS\n    \n    expression : ID '\\''\n    \n    expression : '(' expression ')' '\\''\n    \n    expression : '(' expression ')'\n    \n    expression : expression '+' expression\n               | expression '-' expression\n               | expression '*' expression\n               | expression '/' expression\n               | expression DOTSUM expression\n               | expression DOTDIV expression\n               | expression DOTMUL expression\n               | expression DOTSUB expression\n    \n    expression : function '(' expression ')'\n    \n    function : EYE\n             | ZEROS\n             | ONES\n    \n    keyword : PRINT sequence\n    \n    keyword : BREAK\n    \n    keyword : CONTINUE\n    \n    keyword : RETURN expression\n    \n    body : instruction\n    \n    body : '{' block '}'\n    \n    relation : expression comp_operator expression\n    \n    comp_operator : '>'\n                  | '<'\n                  | EQ\n                  | GEQ\n                  | LEQ\n                  | NEQ\n    \n    if_statement : IF '(' relation ')' body %prec IF\n    \n    if_statement : IF '(' relation ')' body ELSE body\n    \n    loop_statement : while_statement\n                   | for_statement\n    \n    while_statement : WHILE '(' relation ')' body\n    \n    for_statement : FOR ID '=' range body\n    \n    range : expression ':' expression\n    \n    assign_op : '='\n              | SUMASSIGN\n              | DIVASSIGN\n              | SUBASSIGN\n              | MULASSIGN\n    "
    
_lr_action_items = {'{':([0,2,3,4,6,7,11,12,22,23,24,25,35,36,40,41,42,43,44,53,54,67,68,76,77,86,87,88,89,90,91,92,93,94,96,98,99,101,102,103,104,106,107,109,110,112,113,114,115,116,],[3,22,3,-5,-7,-8,-58,-59,3,-4,22,-6,-17,-18,-19,-20,-21,-22,-23,22,-2,-28,-27,-3,104,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,104,104,-14,-56,-47,3,-29,-39,-60,-61,104,22,-62,-57,-48,]),'IF':([0,2,3,4,6,7,11,12,22,23,24,25,35,36,40,41,42,43,44,53,54,67,68,76,77,86,87,88,89,90,91,92,93,94,96,98,99,101,102,103,104,106,107,109,110,112,113,114,115,116,],[10,10,10,-5,-7,-8,-58,-59,10,-4,10,-6,-17,-18,-19,-20,-21,-22,-23,10,-2,-28,-27,-3,10,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,10,10,-14,-56,-47,10,-29,-39,-60,-61,10,10,-62,-57,-48,]),'PRINT':([0,2,3,4,6,7,11,12,22,23,24,25,35,36,40,41,42,43,44,53,54,67,68,76,77,86,87,88,89,90,91,92,93,94,96,98,99,101,102,103,104,106,107,109,110,112,113,114,115,116,],[14,14,14,-5,-7,-8,-58,-59,14,-4,14,-6,-17,-18,-19,-20,-21,-22,-23,14,-2,-28,-27,-3,14,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,14,14,-14,-56,-47,14,-29,-39,-60,-61,14,14,-62,-57,-48,]),'BREAK':([0,2,3,4,6,7,11,12,22,23,24,25,35,36,40,41,42,43,44,53,54,67,68,76,77,86,87,88,89,90,91,92,93,94,96,98,99,101,102,103,104,106,107,109,110,112,113,114,115,116,],[15,15,15,-5,-7,-8,-58,-59,15,-4,15,-6,-17,-18,-19,-20,-21,-22,-23,15,-2,-28,-27,-3,15,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,15,15,-14,-56,-47,15,-29,-39,-60,-61,15,15,-62,-57,-48,]),'CONTINUE':([0,2,3,4,6,7,11,12,22,23,24,25,35,36,40,41,42,43,44,53,54,67,68,76,77,86,87,88,89,90,91,92,93,94,96,98,99,101,102,103,104,106,107,109,110,112,113,114,115,116,],[16,16,16,-5,-7,-8,-58,-59,16,-4,16,-6,-17,-18,-19,-20,-21,-22,-23,16,-2,-28,-27,-3,16,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,16,16,-14,-56,-47,16,-29,-39,-60,-61,16,16,-62,-57,-48,]),'RETURN':([0,2,3,4,6,7,11,12,22,23,24,25,35,36,40,41,42,43,44,53,54,67,68,76,77,86,87,88,89,90,91,92,93,94,96,98,99,101,102,103,104,106,107,109,110,112,113,114,115,116,],[17,17,17,-5,-7,-8,-58,-59,17,-4,17,-6,-17,-18,-19,-20,-21,-22,-23,17,-2,-28,-27,-3,17,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,17,17,-14,-56,-47,17,-29,-39,-60,-61,17,17,-62,-57,-48,]),'WHILE':([0,2,3,4,6,7,11,12,22,23,24,25,35,36,40,41,42,43,44,53,54,67,68,76,77,86,87,88,89,90,91,92,93,94,96,98,99,101,102,103,104,106,107,109,110,112,113,114,115,116,],[18,18,18,-5,-7,-8,-58,-59,18,-4,18,-6,-17,-18,-19,-20,-21,-22,-23,18,-2,-28,-27,-3,18,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,18,18,-14,-56,-47,18,-29,-39,-60,-61,18,18,-62,-57,-48,]),'FOR':([0,2,3,4,6,7,11,12,22,23,24,25,35,36,40,41,42,43,44,53,54,67,68,76,77,86,87,88,89,90,91,92,93,94,96,98,99,101,102,103,104,106,107,109,110,112,113,114,115,116,],[19,19,19,-5,-7,-8,-58,-59,19,-4,19,-6,-17,-18,-19,-20,-21,-22,-23,19,-2,-28,-27,-3,19,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,19,19,-14,-56,-47,19,-29,-39,-60,-61,19,19,-62,-57,-48,]),'ID':([0,2,3,4,6,7,11,12,14,17,19,22,23,24,25,26,27,28,29,30,31,32,35,36,37,38,40,41,42,43,44,48,50,52,53,54,58,59,60,61,62,63,64,65,66,67,68,70,74,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,94,96,97,98,99,101,102,103,104,106,107,109,110,111,112,113,114,115,116,],[20,20,20,-5,-7,-8,-58,-59,36,36,51,20,-4,20,-6,36,36,-63,-64,-65,-66,-67,-17,-18,36,36,-19,-20,-21,-22,-23,36,36,36,20,-2,36,36,36,36,36,36,36,36,36,-28,-27,36,36,-3,20,36,-50,-51,-52,-53,-54,-55,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,36,20,20,-14,-56,-47,20,-29,-39,-60,-61,36,20,20,-62,-57,-48,]),'$end':([1,2,4,6,7,11,12,23,25,54,76,102,103,109,110,115,116,],[0,-1,-5,-7,-8,-58,-59,-4,-6,-2,-3,-56,-47,-60,-61,-57,-48,]),'}':([4,6,7,11,12,23,24,25,53,54,76,102,103,109,110,113,115,116,],[-5,-7,-8,-58,-59,-4,54,-6,76,-2,-3,-56,-47,-60,-61,116,-57,-48,]),';':([5,8,9,15,16,33,34,35,36,40,41,42,43,44,49,57,67,68,71,72,85,86,87,88,89,90,91,92,93,94,96,101,106,107,108,],[25,-9,-10,-44,-45,-43,-16,-17,-18,-19,-20,-21,-22,-23,-46,-11,-28,-27,97,-26,-15,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,-14,-29,-39,-25,]),'ELSE':([6,7,11,12,25,102,103,109,110,115,116,],[-7,-8,-58,-59,-6,112,-47,-60,-61,-57,-48,]),'(':([10,14,17,18,26,27,28,29,30,31,32,37,38,39,45,46,47,48,50,52,58,59,60,61,62,63,64,65,66,70,74,78,79,80,81,82,83,84,97,111,],[26,38,38,50,38,38,-63,-64,-65,-66,-67,38,38,70,-40,-41,-42,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-50,-51,-52,-53,-54,-55,38,38,]),'=':([13,20,21,51,101,],[28,-12,-13,74,-14,]),'SUMASSIGN':([13,20,21,101,],[29,-12,-13,-14,]),'DIVASSIGN':([13,20,21,101,],[30,-12,-13,-14,]),'SUBASSIGN':([13,20,21,101,],[31,-12,-13,-14,]),'MULASSIGN':([13,20,21,101,],[32,-12,-13,-14,]),'-':([14,17,26,27,28,29,30,31,32,34,35,36,37,38,40,41,42,43,44,48,49,50,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,100,101,105,106,107,111,114,],[37,37,37,37,-63,-64,-65,-66,-67,60,-17,-18,37,37,-19,-20,-21,-22,-23,37,60,37,37,60,60,37,37,37,37,37,37,37,37,37,-28,-27,60,37,37,37,-50,-51,-52,-53,-54,-55,60,-31,-32,-33,-34,-35,-36,-37,-38,-30,60,-24,37,60,-14,60,-29,-39,37,60,]),'INTEGER':([14,17,26,27,28,29,30,31,32,37,38,48,50,52,58,59,60,61,62,63,64,65,66,70,74,78,79,80,81,82,83,84,97,111,],[40,40,40,40,-63,-64,-65,-66,-67,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-50,-51,-52,-53,-54,-55,40,40,]),'FLOAT':([14,17,26,27,28,29,30,31,32,37,38,48,50,52,58,59,60,61,62,63,64,65,66,70,74,78,79,80,81,82,83,84,97,111,],[41,41,41,41,-63,-64,-65,-66,-67,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-50,-51,-52,-53,-54,-55,41,41,]),'STRING':([14,17,26,27,28,29,30,31,32,37,38,48,50,52,58,59,60,61,62,63,64,65,66,70,74,78,79,80,81,82,83,84,97,111,],[42,42,42,42,-63,-64,-65,-66,-67,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-50,-51,-52,-53,-54,-55,42,42,]),'EYE':([14,17,26,27,28,29,30,31,32,37,38,48,50,52,58,59,60,61,62,63,64,65,66,70,74,78,79,80,81,82,83,84,97,111,],[45,45,45,45,-63,-64,-65,-66,-67,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-50,-51,-52,-53,-54,-55,45,45,]),'ZEROS':([14,17,26,27,28,29,30,31,32,37,38,48,50,52,58,59,60,61,62,63,64,65,66,70,74,78,79,80,81,82,83,84,97,111,],[46,46,46,46,-63,-64,-65,-66,-67,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-50,-51,-52,-53,-54,-55,46,46,]),'ONES':([14,17,26,27,28,29,30,31,32,37,38,48,50,52,58,59,60,61,62,63,64,65,66,70,74,78,79,80,81,82,83,84,97,111,],[47,47,47,47,-63,-64,-65,-66,-67,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-50,-51,-52,-53,-54,-55,47,47,]),'[':([14,17,20,26,27,28,29,30,31,32,36,37,38,48,50,52,58,59,60,61,62,63,64,65,66,70,74,78,79,80,81,82,83,84,97,111,],[48,48,52,48,48,-63,-64,-65,-66,-67,52,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-50,-51,-52,-53,-54,-55,48,48,]),',':([33,34,35,36,40,41,42,43,44,67,68,72,75,85,86,87,88,89,90,91,92,93,94,96,101,106,107,108,],[58,-16,-17,-18,-19,-20,-21,-22,-23,-28,-27,58,58,-15,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,-14,-29,-39,58,]),']':([34,35,36,40,41,42,43,44,67,68,71,72,75,85,86,87,88,89,90,91,92,93,94,96,101,106,107,108,],[-16,-17,-18,-19,-20,-21,-22,-23,-28,-27,96,-26,101,-15,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,-14,-29,-39,-25,]),'+':([34,35,36,40,41,42,43,44,49,56,57,67,68,69,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,106,107,114,],[59,-17,-18,-19,-20,-21,-22,-23,59,59,59,-28,-27,59,59,-31,-32,-33,-34,-35,-36,-37,-38,-30,59,-24,59,-14,59,-29,-39,59,]),'*':([34,35,36,40,41,42,43,44,49,56,57,67,68,69,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,106,107,114,],[61,-17,-18,-19,-20,-21,-22,-23,61,61,61,-28,-27,61,61,61,61,-33,-34,61,-36,-37,61,-30,61,-24,61,-14,61,-29,-39,61,]),'/':([34,35,36,40,41,42,43,44,49,56,57,67,68,69,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,106,107,114,],[62,-17,-18,-19,-20,-21,-22,-23,62,62,62,-28,-27,62,62,62,62,-33,-34,62,-36,-37,62,-30,62,-24,62,-14,62,-29,-39,62,]),'DOTSUM':([34,35,36,40,41,42,43,44,49,56,57,67,68,69,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,106,107,114,],[63,-17,-18,-19,-20,-21,-22,-23,63,63,63,-28,-27,63,63,63,63,-33,-34,-35,-36,-37,-38,-30,63,-24,63,-14,63,-29,-39,63,]),'DOTDIV':([34,35,36,40,41,42,43,44,49,56,57,67,68,69,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,106,107,114,],[64,-17,-18,-19,-20,-21,-22,-23,64,64,64,-28,-27,64,64,64,64,64,64,64,-36,-37,64,-30,64,-24,64,-14,64,-29,-39,64,]),'DOTMUL':([34,35,36,40,41,42,43,44,49,56,57,67,68,69,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,106,107,114,],[65,-17,-18,-19,-20,-21,-22,-23,65,65,65,-28,-27,65,65,65,65,65,65,65,-36,-37,65,-30,65,-24,65,-14,65,-29,-39,65,]),'DOTSUB':([34,35,36,40,41,42,43,44,49,56,57,67,68,69,85,86,87,88,89,90,91,92,93,94,95,96,100,101,105,106,107,114,],[66,-17,-18,-19,-20,-21,-22,-23,66,66,66,-28,-27,66,66,66,66,-33,-34,-35,-36,-37,-38,-30,66,-24,66,-14,66,-29,-39,66,]),'>':([35,36,40,41,42,43,44,56,67,68,86,87,88,89,90,91,92,93,94,96,101,106,107,],[-17,-18,-19,-20,-21,-22,-23,79,-28,-27,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,-14,-29,-39,]),'<':([35,36,40,41,42,43,44,56,67,68,86,87,88,89,90,91,92,93,94,96,101,106,107,],[-17,-18,-19,-20,-21,-22,-23,80,-28,-27,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,-14,-29,-39,]),'EQ':([35,36,40,41,42,43,44,56,67,68,86,87,88,89,90,91,92,93,94,96,101,106,107,],[-17,-18,-19,-20,-21,-22,-23,81,-28,-27,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,-14,-29,-39,]),'GEQ':([35,36,40,41,42,43,44,56,67,68,86,87,88,89,90,91,92,93,94,96,101,106,107,],[-17,-18,-19,-20,-21,-22,-23,82,-28,-27,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,-14,-29,-39,]),'LEQ':([35,36,40,41,42,43,44,56,67,68,86,87,88,89,90,91,92,93,94,96,101,106,107,],[-17,-18,-19,-20,-21,-22,-23,83,-28,-27,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,-14,-29,-39,]),'NEQ':([35,36,40,41,42,43,44,56,67,68,86,87,88,89,90,91,92,93,94,96,101,106,107,],[-17,-18,-19,-20,-21,-22,-23,84,-28,-27,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,-14,-29,-39,]),')':([35,36,40,41,42,43,44,55,67,68,69,73,86,87,88,89,90,91,92,93,94,95,96,101,105,106,107,],[-17,-18,-19,-20,-21,-22,-23,77,-28,-27,94,98,-31,-32,-33,-34,-35,-36,-37,-38,-30,107,-24,-14,-49,-29,-39,]),':':([35,36,40,41,42,43,44,67,68,86,87,88,89,90,91,92,93,94,96,100,101,106,107,],[-17,-18,-19,-20,-21,-22,-23,-28,-27,-31,-32,-33,-34,-35,-36,-37,-38,-30,-24,111,-14,-29,-39,]),"'":([36,94,],[67,106,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,3,22,104,],[2,24,53,113,]),'instruction':([0,2,3,22,24,53,77,98,99,104,112,113,],[4,23,4,4,23,23,103,103,103,4,103,23,]),'base_instruction':([0,2,3,22,24,53,77,98,99,104,112,113,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'if_statement':([0,2,3,22,24,53,77,98,99,104,112,113,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'loop_statement':([0,2,3,22,24,53,77,98,99,104,112,113,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'assign_expression':([0,2,3,22,24,53,77,98,99,104,112,113,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'keyword':([0,2,3,22,24,53,77,98,99,104,112,113,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'while_statement':([0,2,3,22,24,53,77,98,99,104,112,113,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'for_statement':([0,2,3,22,24,53,77,98,99,104,112,113,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'variable':([0,2,3,22,24,53,77,98,99,104,112,113,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'tensor_id':([0,2,3,14,17,22,24,26,27,37,38,48,50,52,53,58,59,60,61,62,63,64,65,66,70,74,77,78,97,98,99,104,111,112,113,],[21,21,21,44,44,21,21,44,44,44,44,44,44,44,21,44,44,44,44,44,44,44,44,44,44,44,21,44,44,21,21,21,44,21,21,]),'assign_op':([13,],[27,]),'sequence':([14,48,52,97,],[33,72,75,108,]),'expression':([14,17,26,27,37,38,48,50,52,58,59,60,61,62,63,64,65,66,70,74,78,97,111,],[34,49,56,57,68,69,34,56,34,85,86,87,88,89,90,91,92,93,95,100,105,34,114,]),'result':([14,17,26,27,37,38,48,50,52,58,59,60,61,62,63,64,65,66,70,74,78,97,111,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'function':([14,17,26,27,37,38,48,50,52,58,59,60,61,62,63,64,65,66,70,74,78,97,111,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'tensor':([14,17,26,27,37,38,48,50,52,58,59,60,61,62,63,64,65,66,70,74,78,97,111,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'relation':([26,50,],[55,73,]),'rows':([48,],[71,]),'comp_operator':([56,],[78,]),'range':([74,],[99,]),'body':([77,98,99,112,],[102,109,110,115,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','Mparser.py',33),
  ('block -> { block }','block',3,'p_implicit_block','Mparser.py',40),
  ('block -> block { block }','block',4,'p_implicit_block','Mparser.py',41),
  ('block -> block instruction','block',2,'p_block','Mparser.py',52),
  ('block -> instruction','block',1,'p_block','Mparser.py',53),
  ('instruction -> base_instruction ;','instruction',2,'p_instruction','Mparser.py',64),
  ('instruction -> if_statement','instruction',1,'p_instruction','Mparser.py',65),
  ('instruction -> loop_statement','instruction',1,'p_instruction','Mparser.py',66),
  ('base_instruction -> assign_expression','base_instruction',1,'p_base_instruction','Mparser.py',73),
  ('base_instruction -> keyword','base_instruction',1,'p_base_instruction','Mparser.py',74),
  ('assign_expression -> variable assign_op expression','assign_expression',3,'p_assign_expression','Mparser.py',81),
  ('variable -> ID','variable',1,'p_variable','Mparser.py',88),
  ('variable -> tensor_id','variable',1,'p_variable','Mparser.py',89),
  ('tensor_id -> ID [ sequence ]','tensor_id',4,'p_tensor_id','Mparser.py',96),
  ('sequence -> sequence , expression','sequence',3,'p_sequence','Mparser.py',103),
  ('sequence -> expression','sequence',1,'p_sequence','Mparser.py',104),
  ('expression -> result','expression',1,'p_expression_result','Mparser.py',115),
  ('expression -> ID','expression',1,'p_expression_id','Mparser.py',122),
  ('result -> INTEGER','result',1,'p_result','Mparser.py',129),
  ('result -> FLOAT','result',1,'p_result','Mparser.py',130),
  ('result -> STRING','result',1,'p_result','Mparser.py',131),
  ('result -> tensor','result',1,'p_result','Mparser.py',132),
  ('result -> tensor_id','result',1,'p_result','Mparser.py',133),
  ('tensor -> [ rows ]','tensor',3,'p_tensor','Mparser.py',140),
  ('rows -> rows ; sequence','rows',3,'p_rows','Mparser.py',147),
  ('rows -> sequence','rows',1,'p_rows','Mparser.py',148),
  ('expression -> - expression','expression',2,'p_expression_minus','Mparser.py',159),
  ("expression -> ID '",'expression',2,'p_transpose_variable','Mparser.py',166),
  ("expression -> ( expression ) '",'expression',4,'p_transpose_expression','Mparser.py',173),
  ('expression -> ( expression )','expression',3,'p_expression_in_parens','Mparser.py',180),
  ('expression -> expression + expression','expression',3,'p_math_expression','Mparser.py',187),
  ('expression -> expression - expression','expression',3,'p_math_expression','Mparser.py',188),
  ('expression -> expression * expression','expression',3,'p_math_expression','Mparser.py',189),
  ('expression -> expression / expression','expression',3,'p_math_expression','Mparser.py',190),
  ('expression -> expression DOTSUM expression','expression',3,'p_math_expression','Mparser.py',191),
  ('expression -> expression DOTDIV expression','expression',3,'p_math_expression','Mparser.py',192),
  ('expression -> expression DOTMUL expression','expression',3,'p_math_expression','Mparser.py',193),
  ('expression -> expression DOTSUB expression','expression',3,'p_math_expression','Mparser.py',194),
  ('expression -> function ( expression )','expression',4,'p_fun_expression','Mparser.py',201),
  ('function -> EYE','function',1,'p_function','Mparser.py',208),
  ('function -> ZEROS','function',1,'p_function','Mparser.py',209),
  ('function -> ONES','function',1,'p_function','Mparser.py',210),
  ('keyword -> PRINT sequence','keyword',2,'p_print','Mparser.py',217),
  ('keyword -> BREAK','keyword',1,'p_break','Mparser.py',224),
  ('keyword -> CONTINUE','keyword',1,'p_continue','Mparser.py',231),
  ('keyword -> RETURN expression','keyword',2,'p_return','Mparser.py',238),
  ('body -> instruction','body',1,'p_body','Mparser.py',245),
  ('body -> { block }','body',3,'p_block_body','Mparser.py',252),
  ('relation -> expression comp_operator expression','relation',3,'p_relation','Mparser.py',259),
  ('comp_operator -> >','comp_operator',1,'p_comp_operator','Mparser.py',273),
  ('comp_operator -> <','comp_operator',1,'p_comp_operator','Mparser.py',274),
  ('comp_operator -> EQ','comp_operator',1,'p_comp_operator','Mparser.py',275),
  ('comp_operator -> GEQ','comp_operator',1,'p_comp_operator','Mparser.py',276),
  ('comp_operator -> LEQ','comp_operator',1,'p_comp_operator','Mparser.py',277),
  ('comp_operator -> NEQ','comp_operator',1,'p_comp_operator','Mparser.py',278),
  ('if_statement -> IF ( relation ) body','if_statement',5,'p_if_statement','Mparser.py',285),
  ('if_statement -> IF ( relation ) body ELSE body','if_statement',7,'p_if_else_statement','Mparser.py',292),
  ('loop_statement -> while_statement','loop_statement',1,'p_loop_statement','Mparser.py',299),
  ('loop_statement -> for_statement','loop_statement',1,'p_loop_statement','Mparser.py',300),
  ('while_statement -> WHILE ( relation ) body','while_statement',5,'p_while_statement','Mparser.py',307),
  ('for_statement -> FOR ID = range body','for_statement',5,'p_for_statement','Mparser.py',314),
  ('range -> expression : expression','range',3,'p_range','Mparser.py',321),
  ('assign_op -> =','assign_op',1,'p_assign_op','Mparser.py',328),
  ('assign_op -> SUMASSIGN','assign_op',1,'p_assign_op','Mparser.py',329),
  ('assign_op -> DIVASSIGN','assign_op',1,'p_assign_op','Mparser.py',330),
  ('assign_op -> SUBASSIGN','assign_op',1,'p_assign_op','Mparser.py',331),
  ('assign_op -> MULASSIGN','assign_op',1,'p_assign_op','Mparser.py',332),
]
