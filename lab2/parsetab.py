
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "right=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNleft<>EQNEQGEQLEQleft+-leftDOTSUMDOTSUBleft*/leftDOTMULDOTDIVright'ADDASSIGN BREAK COMMENT CONTINUE DIVASSIGN DOTDIV DOTMUL DOTSUB DOTSUM ELSE EQ EYE FOR GEQ IF LEQ MULASSIGN NEQ NUMBER ONES PRINT REAL_NUMBER RETURN STRING SUBASSIGN VAR WHILE ZEROSmul_expressions : expression\n                       | expression mul_expressionsexpression : code_block\n                  | base_expr\n                  | base_expr ';'\n                  | if_statement\n                  | loopbase_expr : assignment\n                 | return\n                 | printoperation : num\n                 | unary_operation\n                 | functioncode_block : '{' mul_expressions '}'print : PRINT print_bodyprint_body : STRING\n                  | cond\n                  | print_body ',' condreturn : RETURN cond\n              | RETURNvector : '[' vector_body ']'vector_body : num\n                   | vector_body ',' num\n                   | emptymatrix : '[' matrix_body ']'matrix_body : vector\n                   | matrix_body ',' vector\n                   | emptynum : NUMBER\n           | REAL_NUMBER\n           | VARrange : VAR '[' int_num_VAR ',' int_num_VAR ']'function : function_name '(' num ')'function_name : ONES\n                | EYE\n                | ZEROScond : cmp\n            | operationloop : while\n            | forwhile : WHILE '(' cond ')' loop_bodyfor : FOR VAR '=' int_num_VAR ':' int_num_VAR loop_bodyloop_body : loop_expr\n                 | loop_expr ';'\n                 | '{' mul_loop_expr '}'loop_expr : base_expr\n                 | loop\n                 | if_loop_statement\n                 | BREAK\n                 | CONTINUEmul_loop_expr : mul_loop_expr loop_body\n                     | loop_bodyif_statement : IF '(' cond ')' expression else_statementelse_statement : ELSE expression\n                      | emptyif_loop_statement : IF '(' cond ')' loop_body else_loop_statementelse_loop_statement : ELSE loop_body\n                      | emptyempty : assignee : VAR\n                | rangeassignment : assignee '=' cond\n                  | assignee '=' matrix\n                  | assignee '=' STRINGassignment : assignee ADDASSIGN condassignment : assignee SUBASSIGN condassignment : assignee MULASSIGN condassignment : VAR DIVASSIGN condint_num_VAR : NUMBER\n                   | VARunary_operation : neg_num\n                | transposeneg_num : '-' numtranspose : VAR '\\'' operation : operation '+' operation\n                 | operation '-' operationoperation : operation DOTSUM operation\n                 | operation DOTSUB operationoperation : operation '*' operation\n                 | operation '/' operationoperation : operation DOTMUL operation\n                 | operation DOTDIV operationcmp : operation '<' operation\n           | operation '>' operationcmp : operation EQ operation\n           | operation NEQ operationcmp : operation GEQ operation\n           | operation LEQ operationoperation : '(' operation ')'"
    
_lr_action_items = {'{':([0,2,3,4,5,6,7,8,9,10,12,13,16,22,31,32,33,34,35,36,39,40,41,42,43,48,49,50,53,55,56,57,59,60,61,62,63,65,80,81,83,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,113,117,120,121,122,123,124,125,126,127,128,131,132,133,138,139,140,142,143,145,146,148,149,150,151,152,153,154,],[7,7,-3,-4,-6,-7,7,-8,-9,-10,-39,-40,-20,-5,-19,-37,-38,-11,-12,-13,-29,-30,-31,-71,-72,-15,-16,-17,-14,-62,-63,-64,-65,-66,-67,-68,-70,-69,-73,-31,-74,7,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,-18,123,-59,-25,-33,-41,-43,123,-46,-47,-48,-49,-50,-53,7,-55,-44,123,-52,123,-54,-45,-51,-42,123,-59,-56,123,-58,-57,]),'IF':([0,2,3,4,5,6,7,8,9,10,12,13,16,22,31,32,33,34,35,36,39,40,41,42,43,48,49,50,53,55,56,57,59,60,61,62,63,65,80,81,83,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,113,117,120,121,122,123,124,125,126,127,128,131,132,133,138,139,140,142,143,145,146,148,149,150,151,152,153,154,],[11,11,-3,-4,-6,-7,11,-8,-9,-10,-39,-40,-20,-5,-19,-37,-38,-11,-12,-13,-29,-30,-31,-71,-72,-15,-16,-17,-14,-62,-63,-64,-65,-66,-67,-68,-70,-69,-73,-31,-74,11,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,-18,129,-59,-25,-33,-41,-43,129,-46,-47,-48,-49,-50,-53,11,-55,-44,129,-52,129,-54,-45,-51,-42,129,-59,-56,129,-58,-57,]),'VAR':([0,2,3,4,5,6,7,8,9,10,12,13,16,17,19,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,48,49,50,51,53,55,56,57,59,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,85,87,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,113,117,120,121,122,123,124,125,126,127,128,130,131,132,133,135,138,139,140,141,142,143,145,146,148,149,150,151,152,153,154,],[15,15,-3,-4,-6,-7,15,-8,-9,-10,-39,-40,41,41,52,-5,41,41,41,41,41,41,63,-19,-37,-38,-11,-12,-13,81,41,-29,-30,-31,-71,-72,-15,-16,-17,41,-14,-62,-63,-64,-65,-66,-67,-68,-70,-69,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-73,-31,-74,81,41,63,15,81,63,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,-18,15,-59,-25,-33,-41,-43,15,-46,-47,-48,-49,-50,63,-53,15,-55,81,-44,15,-52,41,15,-54,-45,-51,-42,15,-59,-56,15,-58,-57,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,12,13,16,22,31,32,33,34,35,36,39,40,41,42,43,48,49,50,53,55,56,57,59,60,61,62,63,65,80,81,83,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,113,117,120,121,122,123,124,125,126,127,128,131,132,133,138,139,140,142,143,145,146,148,149,150,151,152,153,154,],[16,16,-3,-4,-6,-7,16,-8,-9,-10,-39,-40,-20,-5,-19,-37,-38,-11,-12,-13,-29,-30,-31,-71,-72,-15,-16,-17,-14,-62,-63,-64,-65,-66,-67,-68,-70,-69,-73,-31,-74,16,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,-18,16,-59,-25,-33,-41,-43,16,-46,-47,-48,-49,-50,-53,16,-55,-44,16,-52,16,-54,-45,-51,-42,16,-59,-56,16,-58,-57,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,12,13,16,22,31,32,33,34,35,36,39,40,41,42,43,48,49,50,53,55,56,57,59,60,61,62,63,65,80,81,83,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,113,117,120,121,122,123,124,125,126,127,128,131,132,133,138,139,140,142,143,145,146,148,149,150,151,152,153,154,],[17,17,-3,-4,-6,-7,17,-8,-9,-10,-39,-40,-20,-5,-19,-37,-38,-11,-12,-13,-29,-30,-31,-71,-72,-15,-16,-17,-14,-62,-63,-64,-65,-66,-67,-68,-70,-69,-73,-31,-74,17,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,-18,17,-59,-25,-33,-41,-43,17,-46,-47,-48,-49,-50,-53,17,-55,-44,17,-52,17,-54,-45,-51,-42,17,-59,-56,17,-58,-57,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,12,13,16,22,31,32,33,34,35,36,39,40,41,42,43,48,49,50,53,55,56,57,59,60,61,62,63,65,80,81,83,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,113,117,120,121,122,123,124,125,126,127,128,131,132,133,138,139,140,142,143,145,146,148,149,150,151,152,153,154,],[18,18,-3,-4,-6,-7,18,-8,-9,-10,-39,-40,-20,-5,-19,-37,-38,-11,-12,-13,-29,-30,-31,-71,-72,-15,-16,-17,-14,-62,-63,-64,-65,-66,-67,-68,-70,-69,-73,-31,-74,18,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,-18,18,-59,-25,-33,-41,-43,18,-46,-47,-48,-49,-50,-53,18,-55,-44,18,-52,18,-54,-45,-51,-42,18,-59,-56,18,-58,-57,]),'FOR':([0,2,3,4,5,6,7,8,9,10,12,13,16,22,31,32,33,34,35,36,39,40,41,42,43,48,49,50,53,55,56,57,59,60,61,62,63,65,80,81,83,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,113,117,120,121,122,123,124,125,126,127,128,131,132,133,138,139,140,142,143,145,146,148,149,150,151,152,153,154,],[19,19,-3,-4,-6,-7,19,-8,-9,-10,-39,-40,-20,-5,-19,-37,-38,-11,-12,-13,-29,-30,-31,-71,-72,-15,-16,-17,-14,-62,-63,-64,-65,-66,-67,-68,-70,-69,-73,-31,-74,19,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,-18,19,-59,-25,-33,-41,-43,19,-46,-47,-48,-49,-50,-53,19,-55,-44,19,-52,19,-54,-45,-51,-42,19,-59,-56,19,-58,-57,]),'$end':([1,2,3,4,5,6,8,9,10,12,13,16,21,22,31,32,33,34,35,36,39,40,41,42,43,48,49,50,53,55,56,57,59,60,61,62,80,81,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,117,120,121,122,124,125,126,127,128,131,133,138,143,145,148,150,151,153,154,],[0,-1,-3,-4,-6,-7,-8,-9,-10,-39,-40,-20,-2,-5,-19,-37,-38,-11,-12,-13,-29,-30,-31,-71,-72,-15,-16,-17,-14,-62,-63,-64,-65,-66,-67,-68,-73,-31,-74,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,-18,-59,-25,-33,-41,-43,-46,-47,-48,-49,-50,-53,-55,-44,-54,-45,-42,-59,-56,-58,-57,]),'}':([2,3,4,5,6,8,9,10,12,13,16,21,22,23,31,32,33,34,35,36,39,40,41,42,43,48,49,50,53,55,56,57,59,60,61,62,80,81,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,117,120,121,122,124,125,126,127,128,131,133,138,139,140,143,145,146,148,150,151,153,154,],[-1,-3,-4,-6,-7,-8,-9,-10,-39,-40,-20,-2,-5,53,-19,-37,-38,-11,-12,-13,-29,-30,-31,-71,-72,-15,-16,-17,-14,-62,-63,-64,-65,-66,-67,-68,-73,-31,-74,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,-18,-59,-25,-33,-41,-43,-46,-47,-48,-49,-50,-53,-55,-44,145,-52,-54,-45,-51,-42,-59,-56,-58,-57,]),'ELSE':([3,4,5,6,8,9,10,12,13,16,22,31,32,33,34,35,36,39,40,41,42,43,48,49,50,53,55,56,57,59,60,61,62,80,81,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,113,117,120,121,122,124,125,126,127,128,131,133,138,143,145,148,150,151,153,154,],[-3,-4,-6,-7,-8,-9,-10,-39,-40,-20,-5,-19,-37,-38,-11,-12,-13,-29,-30,-31,-71,-72,-15,-16,-17,-14,-62,-63,-64,-65,-66,-67,-68,-73,-31,-74,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,-18,132,-25,-33,-41,-43,-46,-47,-48,-49,-50,-53,-55,-44,-54,-45,-42,152,-56,-58,-57,]),';':([4,8,9,10,12,13,16,31,32,33,34,35,36,39,40,41,42,43,48,49,50,55,56,57,59,60,61,62,80,81,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,117,120,121,122,124,125,126,127,128,138,145,148,150,151,153,154,],[22,-8,-9,-10,-39,-40,-20,-19,-37,-38,-11,-12,-13,-29,-30,-31,-71,-72,-15,-16,-17,-62,-63,-64,-65,-66,-67,-68,-73,-31,-74,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,-18,-25,-33,-41,138,-46,-47,-48,-49,-50,-44,-45,-42,-59,-56,-58,-57,]),'BREAK':([8,9,10,12,13,16,31,32,33,34,35,36,39,40,41,42,43,48,49,50,55,56,57,59,60,61,62,63,65,80,81,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,117,120,121,122,123,124,125,126,127,128,138,139,140,142,145,146,148,149,150,151,152,153,154,],[-8,-9,-10,-39,-40,-20,-19,-37,-38,-11,-12,-13,-29,-30,-31,-71,-72,-15,-16,-17,-62,-63,-64,-65,-66,-67,-68,-70,-69,-73,-31,-74,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,-18,127,-25,-33,-41,-43,127,-46,-47,-48,-49,-50,-44,127,-52,127,-45,-51,-42,127,-59,-56,127,-58,-57,]),'CONTINUE':([8,9,10,12,13,16,31,32,33,34,35,36,39,40,41,42,43,48,49,50,55,56,57,59,60,61,62,63,65,80,81,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,117,120,121,122,123,124,125,126,127,128,138,139,140,142,145,146,148,149,150,151,152,153,154,],[-8,-9,-10,-39,-40,-20,-19,-37,-38,-11,-12,-13,-29,-30,-31,-71,-72,-15,-16,-17,-62,-63,-64,-65,-66,-67,-68,-70,-69,-73,-31,-74,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,-18,128,-25,-33,-41,-43,128,-46,-47,-48,-49,-50,-44,128,-52,128,-45,-51,-42,128,-59,-56,128,-58,-57,]),'(':([11,16,17,18,24,25,26,27,28,29,38,44,45,46,47,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,129,141,],[24,38,38,51,38,38,38,38,38,38,38,84,-34,-35,-36,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,141,38,]),'=':([14,15,20,52,137,],[25,-60,-61,87,-32,]),'ADDASSIGN':([14,15,20,137,],[26,-60,-61,-32,]),'SUBASSIGN':([14,15,20,137,],[27,-60,-61,-32,]),'MULASSIGN':([14,15,20,137,],[28,-60,-61,-32,]),'DIVASSIGN':([15,],[29,]),'[':([15,25,58,118,],[30,58,89,89,]),'NUMBER':([16,17,24,25,26,27,28,29,30,37,38,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,84,85,87,89,93,130,135,141,],[39,39,39,39,39,39,39,39,65,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,65,39,65,65,39,39,]),'REAL_NUMBER':([16,17,24,25,26,27,28,29,37,38,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,84,85,89,135,141,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'-':([16,17,24,25,26,27,28,29,33,34,35,36,38,39,40,41,42,43,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,120,141,],[37,37,37,37,37,37,37,37,73,-11,-12,-13,37,-29,-30,-31,-71,-72,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-73,-31,73,-74,37,73,73,73,73,73,73,-75,-76,-77,-78,-79,-80,-81,-82,-89,-33,37,]),'ONES':([16,17,24,25,26,27,28,29,38,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,141,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'EYE':([16,17,24,25,26,27,28,29,38,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,141,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'ZEROS':([16,17,24,25,26,27,28,29,38,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,141,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'STRING':([17,25,],[49,57,]),',':([32,33,34,35,36,39,40,41,42,43,48,49,50,58,63,64,65,80,81,83,89,90,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,114,115,116,120,134,136,144,],[-37,-38,-11,-12,-13,-29,-30,-31,-71,-72,85,-16,-17,-59,-70,93,-69,-73,-31,-74,-59,118,-26,-28,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,-18,135,-22,-24,-33,-21,-27,-23,]),')':([32,33,34,35,36,39,40,41,42,43,54,80,81,82,83,86,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,120,147,],[-37,-38,-11,-12,-13,-29,-30,-31,-71,-72,88,-73,-31,108,-74,111,-83,-84,-85,-86,-87,-88,-75,-76,-77,-78,-79,-80,-81,-82,-89,120,-33,149,]),'<':([33,34,35,36,39,40,41,42,43,80,81,83,100,101,102,103,104,105,106,107,108,120,],[66,-11,-12,-13,-29,-30,-31,-71,-72,-73,-31,-74,-75,-76,-77,-78,-79,-80,-81,-82,-89,-33,]),'>':([33,34,35,36,39,40,41,42,43,80,81,83,100,101,102,103,104,105,106,107,108,120,],[67,-11,-12,-13,-29,-30,-31,-71,-72,-73,-31,-74,-75,-76,-77,-78,-79,-80,-81,-82,-89,-33,]),'EQ':([33,34,35,36,39,40,41,42,43,80,81,83,100,101,102,103,104,105,106,107,108,120,],[68,-11,-12,-13,-29,-30,-31,-71,-72,-73,-31,-74,-75,-76,-77,-78,-79,-80,-81,-82,-89,-33,]),'NEQ':([33,34,35,36,39,40,41,42,43,80,81,83,100,101,102,103,104,105,106,107,108,120,],[69,-11,-12,-13,-29,-30,-31,-71,-72,-73,-31,-74,-75,-76,-77,-78,-79,-80,-81,-82,-89,-33,]),'GEQ':([33,34,35,36,39,40,41,42,43,80,81,83,100,101,102,103,104,105,106,107,108,120,],[70,-11,-12,-13,-29,-30,-31,-71,-72,-73,-31,-74,-75,-76,-77,-78,-79,-80,-81,-82,-89,-33,]),'LEQ':([33,34,35,36,39,40,41,42,43,80,81,83,100,101,102,103,104,105,106,107,108,120,],[71,-11,-12,-13,-29,-30,-31,-71,-72,-73,-31,-74,-75,-76,-77,-78,-79,-80,-81,-82,-89,-33,]),'+':([33,34,35,36,39,40,41,42,43,80,81,82,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,120,],[72,-11,-12,-13,-29,-30,-31,-71,-72,-73,-31,72,-74,72,72,72,72,72,72,-75,-76,-77,-78,-79,-80,-81,-82,-89,-33,]),'DOTSUM':([33,34,35,36,39,40,41,42,43,80,81,82,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,120,],[74,-11,-12,-13,-29,-30,-31,-71,-72,-73,-31,74,-74,74,74,74,74,74,74,74,74,-77,-78,-79,-80,-81,-82,-89,-33,]),'DOTSUB':([33,34,35,36,39,40,41,42,43,80,81,82,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,120,],[75,-11,-12,-13,-29,-30,-31,-71,-72,-73,-31,75,-74,75,75,75,75,75,75,75,75,-77,-78,-79,-80,-81,-82,-89,-33,]),'*':([33,34,35,36,39,40,41,42,43,80,81,82,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,120,],[76,-11,-12,-13,-29,-30,-31,-71,-72,-73,-31,76,-74,76,76,76,76,76,76,76,76,76,76,-79,-80,-81,-82,-89,-33,]),'/':([33,34,35,36,39,40,41,42,43,80,81,82,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,120,],[77,-11,-12,-13,-29,-30,-31,-71,-72,-73,-31,77,-74,77,77,77,77,77,77,77,77,77,77,-79,-80,-81,-82,-89,-33,]),'DOTMUL':([33,34,35,36,39,40,41,42,43,80,81,82,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,120,],[78,-11,-12,-13,-29,-30,-31,-71,-72,-73,-31,78,-74,78,78,78,78,78,78,78,78,78,78,78,78,-81,-82,-89,-33,]),'DOTDIV':([33,34,35,36,39,40,41,42,43,80,81,82,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,120,],[79,-11,-12,-13,-29,-30,-31,-71,-72,-73,-31,79,-74,79,79,79,79,79,79,79,79,79,79,79,79,-81,-82,-89,-33,]),']':([39,40,58,63,65,81,89,90,91,92,114,115,116,119,134,136,144,],[-29,-30,-59,-70,-69,-31,-59,117,-26,-28,134,-22,-24,137,-21,-27,-23,]),"'":([41,],[83,]),':':([63,65,112,],[-70,-69,130,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'mul_expressions':([0,2,7,],[1,21,23,]),'expression':([0,2,7,88,132,],[2,2,2,113,143,]),'code_block':([0,2,7,88,132,],[3,3,3,3,3,]),'base_expr':([0,2,7,88,111,123,132,139,142,149,152,],[4,4,4,4,124,124,4,124,124,124,124,]),'if_statement':([0,2,7,88,132,],[5,5,5,5,5,]),'loop':([0,2,7,88,111,123,132,139,142,149,152,],[6,6,6,6,125,125,6,125,125,125,125,]),'assignment':([0,2,7,88,111,123,132,139,142,149,152,],[8,8,8,8,8,8,8,8,8,8,8,]),'return':([0,2,7,88,111,123,132,139,142,149,152,],[9,9,9,9,9,9,9,9,9,9,9,]),'print':([0,2,7,88,111,123,132,139,142,149,152,],[10,10,10,10,10,10,10,10,10,10,10,]),'while':([0,2,7,88,111,123,132,139,142,149,152,],[12,12,12,12,12,12,12,12,12,12,12,]),'for':([0,2,7,88,111,123,132,139,142,149,152,],[13,13,13,13,13,13,13,13,13,13,13,]),'assignee':([0,2,7,88,111,123,132,139,142,149,152,],[14,14,14,14,14,14,14,14,14,14,14,]),'range':([0,2,7,88,111,123,132,139,142,149,152,],[20,20,20,20,20,20,20,20,20,20,20,]),'cond':([16,17,24,25,26,27,28,29,51,85,141,],[31,50,54,55,59,60,61,62,86,110,147,]),'cmp':([16,17,24,25,26,27,28,29,51,85,141,],[32,32,32,32,32,32,32,32,32,32,32,]),'operation':([16,17,24,25,26,27,28,29,38,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,141,],[33,33,33,33,33,33,33,33,82,33,94,95,96,97,98,99,100,101,102,103,104,105,106,107,33,33,]),'num':([16,17,24,25,26,27,28,29,37,38,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,84,85,89,135,141,],[34,34,34,34,34,34,34,34,80,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,109,34,115,144,34,]),'unary_operation':([16,17,24,25,26,27,28,29,38,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,141,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'function':([16,17,24,25,26,27,28,29,38,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,141,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'neg_num':([16,17,24,25,26,27,28,29,38,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,141,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'transpose':([16,17,24,25,26,27,28,29,38,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,141,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'function_name':([16,17,24,25,26,27,28,29,38,51,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,141,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'print_body':([17,],[48,]),'matrix':([25,],[56,]),'int_num_VAR':([30,87,93,130,],[64,112,119,142,]),'matrix_body':([58,],[90,]),'vector':([58,118,],[91,136,]),'empty':([58,89,113,150,],[92,116,133,153,]),'vector_body':([89,],[114,]),'loop_body':([111,123,139,142,149,152,],[121,140,146,148,150,154,]),'loop_expr':([111,123,139,142,149,152,],[122,122,122,122,122,122,]),'if_loop_statement':([111,123,139,142,149,152,],[126,126,126,126,126,126,]),'else_statement':([113,],[131,]),'mul_loop_expr':([123,],[139,]),'else_loop_statement':([150,],[151,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> mul_expressions","S'",1,None,None,None),
  ('mul_expressions -> expression','mul_expressions',1,'p_mul_expressions','Mparser.py',33),
  ('mul_expressions -> expression mul_expressions','mul_expressions',2,'p_mul_expressions','Mparser.py',34),
  ('expression -> code_block','expression',1,'p_expression','Mparser.py',38),
  ('expression -> base_expr','expression',1,'p_expression','Mparser.py',39),
  ('expression -> base_expr ;','expression',2,'p_expression','Mparser.py',40),
  ('expression -> if_statement','expression',1,'p_expression','Mparser.py',41),
  ('expression -> loop','expression',1,'p_expression','Mparser.py',42),
  ('base_expr -> assignment','base_expr',1,'p_base_expr','Mparser.py',46),
  ('base_expr -> return','base_expr',1,'p_base_expr','Mparser.py',47),
  ('base_expr -> print','base_expr',1,'p_base_expr','Mparser.py',48),
  ('operation -> num','operation',1,'p_operation','Mparser.py',52),
  ('operation -> unary_operation','operation',1,'p_operation','Mparser.py',53),
  ('operation -> function','operation',1,'p_operation','Mparser.py',54),
  ('code_block -> { mul_expressions }','code_block',3,'p_code_block','Mparser.py',58),
  ('print -> PRINT print_body','print',2,'p_PRINT','Mparser.py',62),
  ('print_body -> STRING','print_body',1,'p_print_body','Mparser.py',66),
  ('print_body -> cond','print_body',1,'p_print_body','Mparser.py',67),
  ('print_body -> print_body , cond','print_body',3,'p_print_body','Mparser.py',68),
  ('return -> RETURN cond','return',2,'p_RETURN','Mparser.py',72),
  ('return -> RETURN','return',1,'p_RETURN','Mparser.py',73),
  ('vector -> [ vector_body ]','vector',3,'p_vector','Mparser.py',77),
  ('vector_body -> num','vector_body',1,'p_vector_body','Mparser.py',81),
  ('vector_body -> vector_body , num','vector_body',3,'p_vector_body','Mparser.py',82),
  ('vector_body -> empty','vector_body',1,'p_vector_body','Mparser.py',83),
  ('matrix -> [ matrix_body ]','matrix',3,'p_matrix','Mparser.py',87),
  ('matrix_body -> vector','matrix_body',1,'p_matrix_body','Mparser.py',91),
  ('matrix_body -> matrix_body , vector','matrix_body',3,'p_matrix_body','Mparser.py',92),
  ('matrix_body -> empty','matrix_body',1,'p_matrix_body','Mparser.py',93),
  ('num -> NUMBER','num',1,'p_num','Mparser.py',97),
  ('num -> REAL_NUMBER','num',1,'p_num','Mparser.py',98),
  ('num -> VAR','num',1,'p_num','Mparser.py',99),
  ('range -> VAR [ int_num_VAR , int_num_VAR ]','range',6,'p_range','Mparser.py',103),
  ('function -> function_name ( num )','function',4,'p_function','Mparser.py',107),
  ('function_name -> ONES','function_name',1,'p_function_name','Mparser.py',111),
  ('function_name -> EYE','function_name',1,'p_function_name','Mparser.py',112),
  ('function_name -> ZEROS','function_name',1,'p_function_name','Mparser.py',113),
  ('cond -> cmp','cond',1,'p_cond','Mparser.py',117),
  ('cond -> operation','cond',1,'p_cond','Mparser.py',118),
  ('loop -> while','loop',1,'p_loop','Mparser.py',122),
  ('loop -> for','loop',1,'p_loop','Mparser.py',123),
  ('while -> WHILE ( cond ) loop_body','while',5,'p_while','Mparser.py',127),
  ('for -> FOR VAR = int_num_VAR : int_num_VAR loop_body','for',7,'p_for','Mparser.py',131),
  ('loop_body -> loop_expr','loop_body',1,'p_loop_body','Mparser.py',135),
  ('loop_body -> loop_expr ;','loop_body',2,'p_loop_body','Mparser.py',136),
  ('loop_body -> { mul_loop_expr }','loop_body',3,'p_loop_body','Mparser.py',137),
  ('loop_expr -> base_expr','loop_expr',1,'p_loop_expr','Mparser.py',141),
  ('loop_expr -> loop','loop_expr',1,'p_loop_expr','Mparser.py',142),
  ('loop_expr -> if_loop_statement','loop_expr',1,'p_loop_expr','Mparser.py',143),
  ('loop_expr -> BREAK','loop_expr',1,'p_loop_expr','Mparser.py',144),
  ('loop_expr -> CONTINUE','loop_expr',1,'p_loop_expr','Mparser.py',145),
  ('mul_loop_expr -> mul_loop_expr loop_body','mul_loop_expr',2,'p_mul_loop_expr','Mparser.py',149),
  ('mul_loop_expr -> loop_body','mul_loop_expr',1,'p_mul_loop_expr','Mparser.py',150),
  ('if_statement -> IF ( cond ) expression else_statement','if_statement',6,'p_if_statement','Mparser.py',154),
  ('else_statement -> ELSE expression','else_statement',2,'p_else_statement','Mparser.py',158),
  ('else_statement -> empty','else_statement',1,'p_else_statement','Mparser.py',159),
  ('if_loop_statement -> IF ( cond ) loop_body else_loop_statement','if_loop_statement',6,'p_if_loop_statement','Mparser.py',163),
  ('else_loop_statement -> ELSE loop_body','else_loop_statement',2,'p_else_loop_statement','Mparser.py',167),
  ('else_loop_statement -> empty','else_loop_statement',1,'p_else_loop_statement','Mparser.py',168),
  ('empty -> <empty>','empty',0,'p_empty','Mparser.py',172),
  ('assignee -> VAR','assignee',1,'p_assignee','Mparser.py',176),
  ('assignee -> range','assignee',1,'p_assignee','Mparser.py',177),
  ('assignment -> assignee = cond','assignment',3,'p_ASSIGN','Mparser.py',181),
  ('assignment -> assignee = matrix','assignment',3,'p_ASSIGN','Mparser.py',182),
  ('assignment -> assignee = STRING','assignment',3,'p_ASSIGN','Mparser.py',183),
  ('assignment -> assignee ADDASSIGN cond','assignment',3,'p_ADDASSIGN','Mparser.py',187),
  ('assignment -> assignee SUBASSIGN cond','assignment',3,'p_SUBASSIGNt','Mparser.py',191),
  ('assignment -> assignee MULASSIGN cond','assignment',3,'p_MULASSIGN','Mparser.py',195),
  ('assignment -> VAR DIVASSIGN cond','assignment',3,'p_DIVASSIGN','Mparser.py',199),
  ('int_num_VAR -> NUMBER','int_num_VAR',1,'p_int_num_VAR','Mparser.py',203),
  ('int_num_VAR -> VAR','int_num_VAR',1,'p_int_num_VAR','Mparser.py',204),
  ('unary_operation -> neg_num','unary_operation',1,'p_unary_operation','Mparser.py',208),
  ('unary_operation -> transpose','unary_operation',1,'p_unary_operation','Mparser.py',209),
  ('neg_num -> - num','neg_num',2,'p_neg','Mparser.py',213),
  ("transpose -> VAR '",'transpose',2,'p_transpose','Mparser.py',217),
  ('operation -> operation + operation','operation',3,'p_operation_sum','Mparser.py',221),
  ('operation -> operation - operation','operation',3,'p_operation_sum','Mparser.py',222),
  ('operation -> operation DOTSUM operation','operation',3,'p_operation_DOTSUM_DOTSUB','Mparser.py',226),
  ('operation -> operation DOTSUB operation','operation',3,'p_operation_DOTSUM_DOTSUB','Mparser.py',227),
  ('operation -> operation * operation','operation',3,'p_operation_MUL_DIV','Mparser.py',231),
  ('operation -> operation / operation','operation',3,'p_operation_MUL_DIV','Mparser.py',232),
  ('operation -> operation DOTMUL operation','operation',3,'p_operation_DOTMUL_DOTDIV','Mparser.py',236),
  ('operation -> operation DOTDIV operation','operation',3,'p_operation_DOTMUL_DOTDIV','Mparser.py',237),
  ('cmp -> operation < operation','cmp',3,'p_operation_CMP','Mparser.py',241),
  ('cmp -> operation > operation','cmp',3,'p_operation_CMP','Mparser.py',242),
  ('cmp -> operation EQ operation','cmp',3,'p_operation_cmp_eq','Mparser.py',246),
  ('cmp -> operation NEQ operation','cmp',3,'p_operation_cmp_eq','Mparser.py',247),
  ('cmp -> operation GEQ operation','cmp',3,'p_operation_cmp_geq','Mparser.py',251),
  ('cmp -> operation LEQ operation','cmp',3,'p_operation_cmp_geq','Mparser.py',252),
  ('operation -> ( operation )','operation',3,'p_operation_group','Mparser.py',256),
]
